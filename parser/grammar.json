{
    "tokens":[
        "EOF", "ID", "LPAREN", "RPAREN", 
        "LBRACKET", "RBRACKET", "COMMA", "SEMICOLON", 
        "char", "void", "int",
        "LBRACE", "RBRACE", "else", "if",
        "while", "return", "for",
        "integerconstant", "charconstant",
        "stringconstant", "SUM", "MINUS", 
        "MULT", "DIV", "EQ", "NEQ", "LEQ", 
        "LT", "GEQ", "GT", "AND", "OR",
        "NOT", "RECEIVE"
    ],
    "Symbols":[
        "EOF", "ID", "(", ")", 
        "{ ", "}", "COMMA", ";", 
        "char", "void", "int",
        "[", "]", "else", "if",
        "while", "return", "for",
        "integerconstant", "charconstant",
        "stringconstant", "+", "-", 
        "*", "/", "==", "!=", "<=", 
        "<", ">=", ">", "&&", "||",
        "!", "="
    ],
    "states":{
        "Program": ["mFunction EOF"],
        "Function": [
            "Type ID LPAREN ParamTypes RPAREN LBRACKET mVarDeclaration mStatement RBRACKET",
            "void ID LPAREN ParamTypes RPAREN LBRACKET mVarDeclaration mStatement RBRACKET"
            ],
        "mFunction": ["", "Function mFunction"],
        "mVarDeclaration": ["", "Type VarDeclaration commaDeclaration SEMICOLON mVarDeclaration"],
        "commaDeclaration": ["", "COMMA VarDeclaration commaDeclaration"],
        "VarDeclaration":
            ["ID possibleArrDef"],
        "possibleArrDef":["", "LBRACE integerconstant RBRACE"],
        "Type": ["char", "int"],
        "ParamTypes":["void", "Type ID possibleArr mParamTypes"],
        "possibleArr":["", "LBRACE RBRACE"],
        "mParamTypes": ["", "COMMA Type ID possibleArr mParamTypes"],
        "Statement": [
            "if LPAREN Expression RPAREN Statement elseStatement",
            "while LPAREN Expression RPAREN Statement",
            "for LPAREN possibleAssign SEMICOLON possibleExpression SEMICOLON possibleAssign RPAREN Statement",
            "return possibleExpression SEMICOLON",
            "Assign SEMICOLON",
            "ID LPAREN possibleExpression_comma RPAREN SEMICOLON",
            "LBRACKET mStatement RBRACKET",
            "SEMICOLON"
            ],
        "elseStatement": ["", "else Statement"],
        "mStatement": ["", "Statement mStatement"],
        "Assign": ["ID possibleIDCall RECEIVE Expression"],
        "possibleIDCall": ["", "LBRACE Expression RBRACE"],
        "possibleAssign": ["", "Assign"],
        "Expression": [
            "MINUS Expression",
            "NOT Expression",
            "Expression Operation",
            "ID IDCall",
            "LPAREN Expression RPAREN",
            "integerconstant",
            "charconstant",
            "stringconstant"
            ],
        "Operation":[
            "BinOP Expression",
            "RelOP Expression",
            "LogOP Expression"
            ],
        "commaExpression": ["", "COMMA Expression commaExpression"],
        "possibleExpression_comma":["", "Expression commaExpression"],
        "IDCall": ["", "LBRACE Expression commaExpression RBRACE"],
        "possibleExpression": ["", "Expression"],
        "BinOP": ["SUM", "MINUS", "MULT", "DIV"],
        "RelOP": ["EQ", "NEQ", "LEQ", "LT", "GEQ", "GT"],
        "LogOP": ["AND", "OR"]
    },
    "precedence": [
        ["left", "PLUS", "MINUS"],
        ["left", "MULT", "DIV"]
    ]
}